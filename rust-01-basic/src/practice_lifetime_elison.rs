// Problem 1: The code is compiling. However, I want you to remove the
// extra lifetimes parameters from function signatures.
// Solution:

struct DataHolder<'a> {
    data: Vec<&'a str>,
}

impl<'a> DataHolder<'a> {
    fn initialize() -> Self {
        DataHolder { data: Vec::new() }
    }

    fn add_data(&mut self, item: &'a str) {
        self.data.push(item);
    }

    fn extract_data_containing_substring(&mut self, sub: &str) -> &str {
        for i in 0..self.data.len() {
            if self.data[i].contains(sub) {
                return self.data.remove(i);
            }
        }
        panic!("Data containing substring not found");
    }
}

pub fn solution_p1() {
    let mut my_data = DataHolder::initialize();
    my_data.add_data("Apple");
    my_data.add_data("Banana");
    my_data.add_data("Cherry");
    my_data.add_data("Date");
    let extracted = my_data.extract_data_containing_substring("na");
    println!("Extracted: {}", extracted);
    assert_eq!(my_data.data.len(), 3);
}



// Problem 2: Identify the function signature which needs explicity lifetime parameters.
// For those, which do not require explicit lifetimes parameters, write their expanded code which will be generated by the compiler.

// Do not compile. This is not a program
// Solution:

/*
fn print(s: &str) {}                                      // does not need explicit lifetime
fn print<'a>(s: &'a str) {}                               // expands code by compiler

fn debug(v: usize, s: &str) {}                            // does not need explicit lifetime
fn debug<'a>(v: usize, s: &'a str) {}                     // expands code by compiler

fn substr(s: &str, until: usize) -> &str {}               // does not need explicit lifetime
fn substr<'a>(s: &'a str, until: usize) -> &'a str;       // expands code by compiler

fn get_str() -> &str {}                                    // needs explicit lifetimes

fn frob(s: &str, t: &str) -> &str{}                        // needs explicit lifetimes

fn get_mut(&mut self) -> &mut T; 	                       // does not need explicit lifetime
fn get_mut<'a>(&'a mut self) -> &'a mut T;	               // expands code by compiler

fn new(buf: &mut [u8]) -> BufWriter;                       // does not need explicit lifetime
fn new<'a>(buf: &'a mut [u8]) -> BufWriter<'a>;            // expanded
*/